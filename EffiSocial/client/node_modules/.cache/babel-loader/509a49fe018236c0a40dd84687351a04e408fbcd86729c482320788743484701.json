{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport users from '../services/api';\nconst useNotifications = userId => {\n  _s();\n  console.log('useNotifications userId', userId);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const fetchNotifications = useCallback(async () => {\n    if (!userId || userId === '') {\n      return;\n    }\n    try {\n      var _incomingRes$data, _outgoingRes$data;\n      const [incomingRes, outgoingRes] = await Promise.all([users.getFriendRequests(), users.getOutgoingFriendRequests()]);\n      console.log('incomingRes', incomingRes);\n      console.log('outgoingRes', outgoingRes);\n      const incoming = ((incomingRes === null || incomingRes === void 0 ? void 0 : (_incomingRes$data = incomingRes.data) === null || _incomingRes$data === void 0 ? void 0 : _incomingRes$data.data) || []).map(req => {\n        var _req$sender, _req$sender2;\n        return {\n          type: 'friend_request_incoming',\n          from: req.sender,\n          createdAt: req.createdAt,\n          status: req.status,\n          _id: req._id,\n          read: false,\n          message: `${((_req$sender = req.sender) === null || _req$sender === void 0 ? void 0 : _req$sender.username) || 'Someone'} sent you a friend request`,\n          avatar: ((_req$sender2 = req.sender) === null || _req$sender2 === void 0 ? void 0 : _req$sender2.profilePicture) || '/default-profile.png'\n        };\n      });\n      const outgoing = ((outgoingRes === null || outgoingRes === void 0 ? void 0 : (_outgoingRes$data = outgoingRes.data) === null || _outgoingRes$data === void 0 ? void 0 : _outgoingRes$data.data) || []).map(req => {\n        var _req$receiver, _req$receiver2;\n        return {\n          type: 'friend_request_outgoing',\n          to: req.receiver,\n          createdAt: req.createdAt,\n          status: req.status,\n          _id: req._id,\n          read: false,\n          message: `You sent a friend request to ${((_req$receiver = req.receiver) === null || _req$receiver === void 0 ? void 0 : _req$receiver.username) || 'someone'}`,\n          avatar: ((_req$receiver2 = req.receiver) === null || _req$receiver2 === void 0 ? void 0 : _req$receiver2.profilePicture) || '/default-profile.png'\n        };\n      });\n      const all = [...incoming, ...outgoing].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      setNotifications(all);\n      setUnreadCount(all.length); // You can add logic to track read/unread if needed\n    } catch (err) {\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, [userId]);\n  useEffect(() => {\n    if (userId && userId !== '') {\n      fetchNotifications();\n      // Poll for notifications every 10 seconds\n      const interval = setInterval(fetchNotifications, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [userId, fetchNotifications]);\n  const markAsRead = () => {\n    setUnreadCount(0);\n  };\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n  const clearNotification = notificationId => {\n    setNotifications(prev => prev.filter(notification => notification._id !== notificationId));\n  };\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n  return {\n    notifications,\n    unreadCount,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    clearNotification,\n    clearAllNotifications\n  };\n};\n_s(useNotifications, \"b2seo9CJDHH5yZLje24eHp/a0Do=\");\nexport default useNotifications;","map":{"version":3,"names":["useState","useCallback","useEffect","users","useNotifications","userId","_s","console","log","notifications","setNotifications","unreadCount","setUnreadCount","fetchNotifications","_incomingRes$data","_outgoingRes$data","incomingRes","outgoingRes","Promise","all","getFriendRequests","getOutgoingFriendRequests","incoming","data","map","req","_req$sender","_req$sender2","type","from","sender","createdAt","status","_id","read","message","username","avatar","profilePicture","outgoing","_req$receiver","_req$receiver2","to","receiver","sort","a","b","Date","length","err","interval","setInterval","clearInterval","markAsRead","markAllAsRead","prev","notification","clearNotification","notificationId","filter","clearAllNotifications"],"sources":["C:/Users/katzi/OneDrive/מסמכים/New folder (2)/SocialNetwork/EffiSocial/client/src/hooks/useNotifications.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport users from '../services/api';\r\n\r\nconst useNotifications = (userId) => {\r\n  console.log('useNotifications userId', userId);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  const fetchNotifications = useCallback(async () => {\r\n    if (!userId || userId === '') {\r\n      return;\r\n    }\r\n    try {\r\n      const [incomingRes, outgoingRes] = await Promise.all([\r\n        users.getFriendRequests(),\r\n        users.getOutgoingFriendRequests()\r\n      ]);\r\n      console.log('incomingRes', incomingRes);\r\n      console.log('outgoingRes', outgoingRes);\r\n      const incoming = (incomingRes?.data?.data || []).map(req => ({\r\n        type: 'friend_request_incoming',\r\n        from: req.sender,\r\n        createdAt: req.createdAt,\r\n        status: req.status,\r\n        _id: req._id,\r\n        read: false,\r\n        message: `${req.sender?.username || 'Someone'} sent you a friend request`,\r\n        avatar: req.sender?.profilePicture || '/default-profile.png',\r\n      }));\r\n      const outgoing = (outgoingRes?.data?.data || []).map(req => ({\r\n        type: 'friend_request_outgoing',\r\n        to: req.receiver,\r\n        createdAt: req.createdAt,\r\n        status: req.status,\r\n        _id: req._id,\r\n        read: false,\r\n        message: `You sent a friend request to ${req.receiver?.username || 'someone'}`,\r\n        avatar: req.receiver?.profilePicture || '/default-profile.png',\r\n      }));\r\n      const all = [...incoming, ...outgoing].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n      setNotifications(all);\r\n      setUnreadCount(all.length); // You can add logic to track read/unread if needed\r\n    } catch (err) {\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (userId && userId !== '') {\r\n      fetchNotifications();\r\n      // Poll for notifications every 10 seconds\r\n      const interval = setInterval(fetchNotifications, 10000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [userId, fetchNotifications]);\r\n\r\n  const markAsRead = () => {\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    setNotifications((prev) =>\r\n      prev.map((notification) => ({ ...notification, read: true }))\r\n    );\r\n  };\r\n\r\n  const clearNotification = (notificationId) => {\r\n    setNotifications((prev) =>\r\n      prev.filter((notification) => notification._id !== notificationId)\r\n    );\r\n  };\r\n\r\n  const clearAllNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    clearNotification,\r\n    clearAllNotifications,\r\n  };\r\n};\r\n\r\nexport default useNotifications; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}