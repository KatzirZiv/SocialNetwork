{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport users from '../services/api';\nconst useNotifications = userId => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Fetch notifications from the API (friend requests)\n  const fetchNotifications = async () => {\n    if (!userId) return;\n    try {\n      const [incomingRes, outgoingRes] = await Promise.all([users.getFriendRequests(), users.getOutgoingFriendRequests()]);\n      const incoming = ((incomingRes === null || incomingRes === void 0 ? void 0 : incomingRes.data) || []).map(req => {\n        var _req$from;\n        return {\n          type: 'friend_request_incoming',\n          from: req.from,\n          createdAt: req.createdAt,\n          status: req.status,\n          _id: req._id,\n          read: false,\n          message: `${((_req$from = req.from) === null || _req$from === void 0 ? void 0 : _req$from.username) || 'Someone'} sent you a friend request`\n        };\n      });\n      const outgoing = ((outgoingRes === null || outgoingRes === void 0 ? void 0 : outgoingRes.data) || []).map(req => {\n        var _req$to;\n        return {\n          type: 'friend_request_outgoing',\n          to: req.to,\n          createdAt: req.createdAt,\n          status: req.status,\n          _id: req._id,\n          read: false,\n          message: `You sent a friend request to ${((_req$to = req.to) === null || _req$to === void 0 ? void 0 : _req$to.username) || 'someone'}`\n        };\n      });\n      const all = [...incoming, ...outgoing].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      setNotifications(all);\n      setUnreadCount(all.length); // You can add logic to track read/unread if needed\n    } catch (err) {\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  };\n  const markAsRead = () => {\n    setUnreadCount(0);\n  };\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      read: true\n    })));\n  };\n  const clearNotification = notificationId => {\n    setNotifications(prev => prev.filter(notification => notification._id !== notificationId));\n  };\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n  return {\n    notifications,\n    unreadCount,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    clearNotification,\n    clearAllNotifications\n  };\n};\n_s(useNotifications, \"EeIc8b7pP5NhcmYGZgyN3NnpgUA=\");\nexport default useNotifications;","map":{"version":3,"names":["useState","users","useNotifications","userId","_s","notifications","setNotifications","unreadCount","setUnreadCount","fetchNotifications","incomingRes","outgoingRes","Promise","all","getFriendRequests","getOutgoingFriendRequests","incoming","data","map","req","_req$from","type","from","createdAt","status","_id","read","message","username","outgoing","_req$to","to","sort","a","b","Date","length","err","markAsRead","markAllAsRead","prev","notification","clearNotification","notificationId","filter","clearAllNotifications"],"sources":["C:/Users/katzi/OneDrive/מסמכים/New folder (2)/SocialNetwork/EffiSocial/client/src/hooks/useNotifications.js"],"sourcesContent":["import { useState } from 'react';\r\nimport users from '../services/api';\r\n\r\nconst useNotifications = (userId) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  // Fetch notifications from the API (friend requests)\r\n  const fetchNotifications = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      const [incomingRes, outgoingRes] = await Promise.all([\r\n        users.getFriendRequests(),\r\n        users.getOutgoingFriendRequests()\r\n      ]);\r\n      const incoming = (incomingRes?.data || []).map(req => ({\r\n        type: 'friend_request_incoming',\r\n        from: req.from,\r\n        createdAt: req.createdAt,\r\n        status: req.status,\r\n        _id: req._id,\r\n        read: false,\r\n        message: `${req.from?.username || 'Someone'} sent you a friend request`,\r\n      }));\r\n      const outgoing = (outgoingRes?.data || []).map(req => ({\r\n        type: 'friend_request_outgoing',\r\n        to: req.to,\r\n        createdAt: req.createdAt,\r\n        status: req.status,\r\n        _id: req._id,\r\n        read: false,\r\n        message: `You sent a friend request to ${req.to?.username || 'someone'}`,\r\n      }));\r\n      const all = [...incoming, ...outgoing].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n      setNotifications(all);\r\n      setUnreadCount(all.length); // You can add logic to track read/unread if needed\r\n    } catch (err) {\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n    }\r\n  };\r\n\r\n  const markAsRead = () => {\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    setNotifications((prev) =>\r\n      prev.map((notification) => ({ ...notification, read: true }))\r\n    );\r\n  };\r\n\r\n  const clearNotification = (notificationId) => {\r\n    setNotifications((prev) =>\r\n      prev.filter((notification) => notification._id !== notificationId)\r\n    );\r\n  };\r\n\r\n  const clearAllNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    clearNotification,\r\n    clearAllNotifications,\r\n  };\r\n};\r\n\r\nexport default useNotifications; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}